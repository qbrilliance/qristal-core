# trigger pipeline again
variables:
  CI_IMAGE: quantumbrilliance/ci-ubuntu20.04:sdk-beta-18
  EMULATOR_CI_IMAGE: registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/emulator:ci-2
  CUDAQ_CI_IMAGE: registry.gitlab.com/qbau/software-and-apps/core:qoda-2

stages:
  - build
  - test
  - downstream

# Switch between merge request and branch pipelines.
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.install-core:
  before_script:
    - echo $PWD
    - ls *
    - whoami
    - rm -rf ${QB_DIR}/core-local
    - mv core_artefacts/build .
    - cmake --install build

ubuntu20-build-for-emulator:
  stage: build
  image: $EMULATOR_CI_IMAGE
  tags: 
    - cutensornet2.0
  script:
    - rm -rf ${QB_DIR}/core-local
    # Build core with SUPPORT_EMULATOR_BUILD_ONLY=ON
    - cmake -B build . 
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core-local 
      -DXACC_DIR=${QB_DIR}/xacc-local
      -Dautodiff_DIR=${QB_DIR}/autodiff-local/lib/cmake/autodiff
      -DSUPPORT_EMULATOR_BUILD_ONLY=ON
    - cmake --build build -- -j`nproc`
    # We need to put these things in a dedicated folder to avoid clashing with files of the same name in downstream projects.
    - mkdir core_artefacts
    - mv build cmake include core_artefacts
  artifacts:
    when: always
    paths: 
      # These are all the things required to install the core for supporting the build of the emulator.
      - core_artefacts/build/cmake_install.cmake
      - core_artefacts/build/coreDependencies.cmake
      - core_artefacts/build/qbcore-config.cmake
      - core_artefacts/build/qbcore-config-version.cmake
      - core_artefacts/build/CMakeFiles/Export/
      - core_artefacts/build/libnoise.so*
      - core_artefacts/cmake/py_packages_path.cmake
      - core_artefacts/cmake/xacc_utilities.cmake
      - core_artefacts/cmake/cudaq_utilities.cmake
      - core_artefacts/cmake/manifest.json.in
      - core_artefacts/include
      
ubuntu20-build:
  stage: build
  image: $CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - rm -rf ${QB_DIR}/core-local
    - cmake -B build . 
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core-local 
      -DXACC_DIR=${QB_DIR}/xacc-local
      -DTNQVM_DIR=${QB_DIR}/xacc-local
      -DWITH_TKET=ON
      -DTKET_DIR=${QB_DIR}/tket-local
    - cmake --build build -- -j`nproc`
    # We need to put these things in a dedicated folder to avoid clashing with files of the same name in downstream projects.
    - mkdir core_artefacts
    - mv build cmake examples include src tests core_artefacts
  artifacts:
    when: always
    paths:
      # These are all the things required to install the full core.
      - core_artefacts/build/cmake_install.cmake
      - core_artefacts/build/coreDependencies.cmake
      - core_artefacts/build/qbcore-config.cmake
      - core_artefacts/build/qbcore-config-version.cmake
      - core_artefacts/build/CMakeFiles/Export/
      - core_artefacts/build/CITests
      - core_artefacts/build/lib*
      - core_artefacts/build/core.cpython-38-x86_64-linux-gnu.so
      - core_artefacts/build/plugins
      - core_artefacts/build/configured_example_files
      - core_artefacts/cmake/py_packages_path.cmake
      - core_artefacts/cmake/xacc_utilities.cmake
      - core_artefacts/cmake/cudaq_utilities.cmake
      - core_artefacts/cmake/manifest.json.in
      - core_artefacts/include
      - core_artefacts/examples
      - core_artefacts/src/aws_braket/aws_python_script.py
      - core_artefacts/tests/XaccInitialisedTests.cpp

cudaq-build:
  stage: build
  image: $CUDAQ_CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - rm -rf ${QB_DIR}/core-local
    - python3 -m pip install --upgrade cmake
    - cmake -B build . 
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core-local
      -DINSTALL_MISSING=ON
    # Above line is temporary; can be removed once autodiff, torch and torchviz are added to cudaq image 
    - cmake --build build -- -j`nproc`
    - cmake --install build
    # Compile and run CUDAQ examples
    - cd ${QB_DIR}/core-local/examples/cpp/benchmark1_qasm && cmake -B build . && cmake --build build && ./build/benchmark1_qasm
    - cd ${QB_DIR}/core-local/examples/cpp/benchmark1_cudaq && cmake -B build . && cmake --build build && ./build/benchmark1_cudaq
    - cd ${QB_DIR}/core-local/examples/cpp/cudaq_vqe_cobyla && cmake -B build . && cmake --build build && ./build/vqe-cudaq-cobyla 
    - cd ${QB_DIR}/core-local/examples/cpp/cudaq_vqe_lbfgs && cmake -B build . && cmake --build build && ./build/vqe-cudaq-gradients
    - cd ${QB_DIR}/core-local/examples/cpp/cudaq_vqe_hydrogens && python3 gen_h_chain.py && cmake -B build . && cmake --build build && cd build && ./vqe-cudaq-hydrogens  

ubuntu20-cpp-tests:
  stage: test
  needs: ["ubuntu20-build"]
  extends: .install-core
  image: $CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - ./build/CITests --test --gtest_output='xml:core_gtests.xml'
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: core_gtests.xml

ubuntu20-py-tests:
  stage: test
  needs: ["ubuntu20-build"]
  extends: .install-core
  image: $CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - cd tests/python_module && python3 -m pytest --junitxml="report.xml"
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: tests/python_module/report.xml

ubuntu20-py-stack-tests:
  stage: test
  needs: ["ubuntu20-build"]
  extends: .install-core
  image: $CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - echo "# QB_QCSTACK_2023_2_1_URL = $QB_QCSTACK_2023_2_1_URL"
    - cd tests/qcstack && python3 -m pytest --junitxml="report-stack.xml"
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: tests/qcstack/report-stack.xml
    
# If this branch is part of a merge request, trigger downstream decoder build and test.
trigger-decoder:
  needs: ["ubuntu20-build"]
  stage: downstream
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/decoder  
    branch: main
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH

# If this branch is part of a merge request, trigger downstream emulator build and test.
trigger-emulator:
  needs: ["ubuntu20-build-for-emulator"]
  stage: downstream
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/emulator
    branch: main
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH

# If this branch is part of a merge request, trigger downstream SDK build and test.
trigger-sdk:
  needs: ["ubuntu20-build"]
  stage: downstream
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/QBSDK
    branch: main
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH
