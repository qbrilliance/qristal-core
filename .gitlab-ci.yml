include:
  - '.qristal-core-ci-images.yml'
  - project: 'qbau/software-and-apps/pipelines'
    ref: main
    file: 'ppc_instance_handler.gitlab-ci.yml'

variables:
  USE_MPI: "ON"
  # Branches to use for downstream repo triggers (ubuntu-x86, rhel-x86, rhel-power). Default: "main"
  EMULATOR_TRIGGER_BRANCH: main
  DECODER_TRIGGER_BRANCH: main
  SDK_TRIGGER_BRANCH: main
  QCSTACK_TRIGGER_BRANCH: develop

stages:
  - build
  - test
  - downstream

# Switch between merge request and branch pipelines.
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.install-core:
  before_script:
    - echo $PWD
    - ls *
    - whoami
    - rm -rf ${QB_DIR}/core
    - mv core_artefacts/build .
    - cmake --install build

# These are all the things required to install the full core.
# unfortunately only supported for script and before_script but not paths: https://gitlab.com/gitlab-org/gitlab/-/issues/351169
#    - *artifacts_core
#.artifacts_core: &artifacts_core
#    - core_artefacts/build/cmake_install.cmake
#    - core_artefacts/build/afterCPMAddPackage.cmake
#    - core_artefacts/build/coreDependencies.cmake
#    - core_artefacts/build/qristal_core-config.cmake
#    - core_artefacts/build/qristal_core-config-version.cmake
#    - core_artefacts/build/CMakeFiles/Export/
#    - core_artefacts/build/lib*
#    - core_artefacts/build/core.cpython-*-linux-gnu.so
#    - core_artefacts/build/plugins
#    - core_artefacts/build/configured_example_files
#    - core_artefacts/cmake/py_packages_path.cmake
#    - core_artefacts/cmake/xacc_utilities.cmake
#    - core_artefacts/cmake/manifest.json.in
#    - core_artefacts/include
#    - core_artefacts/examples
#    - core_artefacts/remote_backends.yaml
#    - core_artefacts/src/backends/aws_braket/aws_python_script.py
#    - core_artefacts/tests/misc_cpp/XaccInitialisedTests.cpp
.paths:
  ci:
    - core_artefacts/build/cmake_install.cmake
    - core_artefacts/build/afterCPMAddPackage.cmake
    - core_artefacts/build/coreDependencies.cmake
    - core_artefacts/build/qristal_core-config.cmake
    - core_artefacts/build/qristal_core-config-version.cmake
    - core_artefacts/build/CMakeFiles/Export/
    - core_artefacts/build/lib*
    - core_artefacts/build/core.cpython-*-linux-gnu.so
    - core_artefacts/build/plugins
    - core_artefacts/build/configured_example_files
    - core_artefacts/cmake/py_packages_path.cmake
    - core_artefacts/cmake/xacc_utilities.cmake
    - core_artefacts/cmake/manifest.json.in
    - core_artefacts/include
    - core_artefacts/examples
    - core_artefacts/remote_backends.yaml
    - core_artefacts/src/backends/aws_braket/aws_python_script.py
    - core_artefacts/tests/misc_cpp/XaccInitialisedTests.cpp
#    - *artifacts_core
    - core_artefacts/build/CITests
    - core_artefacts/build/TketTests
    - core_artefacts/build/BraketTests
    - core_artefacts/build/HardwareTests
    - core_artefacts/build/ProfilingCITests
  cudaq:
    - core_artefacts/build/cmake_install.cmake
    - core_artefacts/build/afterCPMAddPackage.cmake
    - core_artefacts/build/coreDependencies.cmake
    - core_artefacts/build/qristal_core-config.cmake
    - core_artefacts/build/qristal_core-config-version.cmake
    - core_artefacts/build/CMakeFiles/Export/
    - core_artefacts/build/lib*
    - core_artefacts/build/core.cpython-*-linux-gnu.so
    - core_artefacts/build/plugins
    - core_artefacts/build/configured_example_files
    - core_artefacts/cmake/py_packages_path.cmake
    - core_artefacts/cmake/xacc_utilities.cmake
    - core_artefacts/cmake/manifest.json.in
    - core_artefacts/include
    - core_artefacts/examples
    - core_artefacts/remote_backends.yaml
    - core_artefacts/src/backends/aws_braket/aws_python_script.py
    - core_artefacts/tests/misc_cpp/XaccInitialisedTests.cpp
#    - *artifacts_core
    - core_artefacts/build/CudaqCITests
  deps:
    - core_artefacts/build/cmake_install.cmake
    - core_artefacts/build/afterCPMAddPackage.cmake
    - core_artefacts/build/coreDependencies.cmake
    - core_artefacts/build/qristal_core-config.cmake
    - core_artefacts/build/qristal_core-config-version.cmake
    - core_artefacts/build/CMakeFiles/Export/
    - core_artefacts/build/lib*
    - core_artefacts/build/core.cpython-*-linux-gnu.so
    - core_artefacts/build/plugins
    - core_artefacts/build/configured_example_files
    - core_artefacts/cmake/py_packages_path.cmake
    - core_artefacts/cmake/xacc_utilities.cmake
    - core_artefacts/cmake/manifest.json.in
    - core_artefacts/include
    - core_artefacts/examples
    - core_artefacts/remote_backends.yaml
    - core_artefacts/src/backends/aws_braket/aws_python_script.py
    - core_artefacts/tests/misc_cpp/XaccInitialisedTests.cpp
#    - *artifacts_core
    - core_artefacts/build/CITests
    - core_artefacts/build/TketTests
    - core_artefacts/build/BraketTests
    - core_artefacts/build/HardwareTests
    - core_artefacts/build/ProfilingCITests
    - core_artefacts/build/_deps
    - core_artefacts/deps
  rhel:
    - core_artefacts/build/cmake_install.cmake
    - core_artefacts/build/afterCPMAddPackage.cmake
    - core_artefacts/build/coreDependencies.cmake
    - core_artefacts/build/qristal_core-config.cmake
    - core_artefacts/build/qristal_core-config-version.cmake
    - core_artefacts/build/CMakeFiles/Export/
    - core_artefacts/build/lib*
    - core_artefacts/build/core.cpython-*-linux-gnu.so
    - core_artefacts/build/plugins
    - core_artefacts/build/configured_example_files
    - core_artefacts/cmake/py_packages_path.cmake
    - core_artefacts/cmake/xacc_utilities.cmake
    - core_artefacts/cmake/manifest.json.in
    - core_artefacts/include
    - core_artefacts/examples
    - core_artefacts/remote_backends.yaml
    - core_artefacts/src/backends/aws_braket/aws_python_script.py
    - core_artefacts/tests/misc_cpp/XaccInitialisedTests.cpp
#    - *artifacts_core
    - core_artefacts/build/CITests
    - core_artefacts/build/TketTests
    - core_artefacts/build/BraketTests
    - core_artefacts/build/HardwareTests
    - core_artefacts/build/CudaqCITests


# - - - - - - - build - - - - - - - #
ci-build:
  stage: build
  image: $CI_IMAGE_UBUNTU_X86_CLANG
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - rm -rf ${QB_DIR}/core
    - echo "MPI is $USE_MPI"
    - cmake -B build .
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core
      -DXACC_DIR=${QB_DIR}/xacc
      -DTNQVM_DIR=${QB_DIR}/xacc
      -DWITH_TKET=ON
      -DTKET_DIR=${QB_DIR}/tket
      -DENABLE_MPI=$USE_MPI
    - cmake --build build -- -j`nproc`
    - mkdir core_artefacts
    - mv build cmake examples include src tests remote_backends.yaml core_artefacts
  artifacts:
    when: always
    paths: !reference [.paths, ci]

ci-build-gcc:
  stage: build
  image: $CI_IMAGE_UBUNTU_X86_GCC
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - rm -rf ${QB_DIR}/core
    - echo "MPI is $USE_MPI"
    - cmake -B build .
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core
      -DXACC_DIR=${QB_DIR}/xacc
      -DTNQVM_DIR=${QB_DIR}/xacc
      -DWITH_TKET=ON
      -DTKET_DIR=${QB_DIR}/tket
      -DENABLE_MPI=$USE_MPI
    - cmake --build build -- -j`nproc`
    - cmake --install build

ci-build-cuda:
  stage: build
  image: $CI_IMAGE_UBUNTU_X86_CLANG_CUDA
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  script:
    - rm -rf ${QB_DIR}/core
    - cmake -B build .
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core
      -DXACC_DIR=${QB_DIR}/xacc
      -DTNQVM_DIR=${QB_DIR}/xacc
      -DWITH_TKET=ON
      -DTKET_DIR=${QB_DIR}/tket
    - cmake --build build -- -j`nproc`
    - cmake --install build
    - mkdir core_artefacts
    - mv build cmake examples include src tests remote_backends.yaml core_artefacts
  artifacts:
    when: always
    paths: !reference [.paths, cudaq]

# Build with INSTALL_MISSING from a vanilla Ubuntu image
# TODO: Fix this to use a Docker runner
ci-build-install-missing:
  stage: build
  tags:
    - lambda
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
  script:
    #- apt update && apt install -y build-essential cmake gfortran git libboost-all-dev libcurl4-openssl-dev libeigen3-dev libopenblas-dev libpython3-dev libssl-dev python3 python3-pip
    - cmake -B build .
      -DINSTALL_MISSING=ON
      -DWITH_TKET=ON
      -DENABLE_MPI=$USE_MPI
      -DWITH_PROFILING=ON
    - cmake --build build -- -j`nproc`
    # We need to put these things in a dedicated folder to avoid clashing with files of the same name in downstream projects.
    - mkdir core_artefacts
    - mv build deps cmake examples include src tests remote_backends.yaml core_artefacts
  artifacts:
    when: always
    paths: !reference [.paths, deps]

# - - - - - - - test - - - - - - - #
ci-cpp-tests:
  stage: test
  needs: ["ci-build"]
  extends: .install-core
  image: $CI_IMAGE_UBUNTU_X86_CLANG
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - ./build/CITests --test --gtest_output='xml:core_gtests.xml'
    - ./build/TketTests --test --gtest_output='xml:tket_gtests.xml'
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: core_gtests.xml
      junit: tket_gtests.xml

ci-cpp-profiling-tests:
  stage: test
  needs: ["ci-build-install-missing"]
  tags:
    - lambda
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - mv core_artefacts/build .
    - mv core_artefacts/deps .
    - chmod 700 relocate.sh
    - ./relocate.sh
    - cmake --install build
    - ls -l build/.
    - find -name "ProfilingCITests"
    - ./build/ProfilingCITests --test --gtest_output='xml:core_profiling_gtests.xml'
  artifacts:
    when: always
    reports:
      junit: core_profiling_gtests.xml

ci-py-tests:
  stage: test
  needs: ["ci-build"]
  extends: .install-core
  image: $CI_IMAGE_UBUNTU_X86_CLANG
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - cd tests/python_module && python3 -m pytest --junitxml="report.xml"
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: tests/python_module/report.xml

#Note: it may be that in future this could be done a little more neatly using the Docker executor
#      instead of the shell executor, with the qcstack container specified with the "service" keyword.
ci-hardware-tests:
  stage: test
  needs: ["ci-build-install-missing"]
  tags:
    - lambda
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_PIPELINE_SOURCE != "schedule"
      variables:
        QCSTACK_REGISTRY: registry.gitlab.com/qbau/control/qcstack/qcstack_server
        QCSTACK_TAG: "latest"
        QCSTACK_ARGS: "--ssl-cert-dir /root/default_certs --max-circuit-depth 1000 --reservation-shared-secret hello --system dummy --calibration False --benchmark False"
  script:
    - mv core_artefacts/build .
    - mv core_artefacts/deps .
    - chmod 700 relocate.sh
    - ./relocate.sh
    - cmake --install build
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    # Just in case a previous run failed before stopping the qcstack container
    - docker stop -t5 qcstack_server || true
    # Give qcstack time to shut down cleanly
    - sleep 5
    - docker pull $QCSTACK_REGISTRY:$QCSTACK_TAG
    - docker run -d --rm --name qcstack_server -p=8443:8443 $QCSTACK_REGISTRY:$QCSTACK_TAG $QCSTACK_ARGS
    # Give qcstack time to spin up properly
    - sleep 20
    # Make sure the qcstack image hasn't crashed
    - if docker inspect qcstack_server; then
        # Run C++ tests of qcstack interface
    -   ./build/HardwareTests --test --gtest_output='xml:core_hardware_gtests.xml'
        # Run python tests of qcstack interface
    -   cd tests/qcstack && python3 -m pytest --junitxml="report-qcstack.xml"
        # Shut down (and auto-remove) qcstack container
    -   docker stop qcstack_server
    # Otherwise print error and fail
    - else
    -   echo "Qcstack image $QCSTACK_REGISTRY:$QCSTACK_TAG failed to startup properly."
    -   exit 1
    - fi
  artifacts:
    when: always
    reports:
      junit: [tests/qcstack/report-qcstack.xml, core_hardware_gtests.xml]

cudaq-cpp-tests:
  stage: test
  needs: [ci-build-cuda]
  image: $CI_IMAGE_UBUNTU_X86_CLANG_CUDA
  extends: .install-core
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - ./build/CudaqCITests --test --gtest_output='xml:core_cudaq_gtests.xml'
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: core_cudaq_gtests.xml

cudaq-py-tests:
  stage: test
  needs: [ci-build-cuda]
  image: $CI_IMAGE_UBUNTU_X86_CLANG_CUDA
  extends: .install-core
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - cd tests/python_module && python3 -m pytest cudaq_integration.py --junitxml="report.xml"
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: tests/python_module/report.xml

# - - - - - - - trigger - - - - - - - #
# If this branch is part of a merge request, trigger downstream decoder build and test.
trigger-decoder:
  stage: downstream
  needs: ["ci-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/decoder
    branch: $DECODER_TRIGGER_BRANCH
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH

# If this branch is part of a merge request, trigger downstream emulator build and test.
trigger-emulator:
  stage: downstream
  needs: ["ci-build-cuda"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/emulator
    branch: $EMULATOR_TRIGGER_BRANCH
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH
    UPSTREAM_JOB: trigger-emulator
    QCSTACK_TAG: develop

# Trigger downstream emulator build and run benchmark.
trigger-emulator-benchmark:
  stage: downstream
  needs: ["ci-build-cuda"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  trigger:
    project: qbau/software-and-apps/emulator
    branch: $EMULATOR_TRIGGER_BRANCH
  variables:
    UPSTREAM_REF: main
    UPSTREAM_JOB: trigger-emulator-benchmark

# If this branch is part of a merge request, trigger downstream SDK build and test.
trigger-sdk:
  stage: downstream
  needs: ["ci-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/QBSDK
    branch: $SDK_TRIGGER_BRANCH
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH

# If this branch is part of a merge request, trigger downstream qcstack vQPU build and test.
trigger-vqpu-in-qcstack:
  stage: downstream
  needs: ["ci-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/control/qcstack
    branch: $QCSTACK_TRIGGER_BRANCH
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH

# - - - - - - - - - - - - - - - - - - RHEL - - - - - - - - - - - - - - - - - - #

# build
rhel-x86-build:
  stage: build
  image: $CI_IMAGE_RHEL_X86
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - rm -rf ${QB_DIR}/core
    - cmake -B build .
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core
      -DXACC_DIR=${QB_DIR}/xacc
      -DTNQVM_DIR=${QB_DIR}/xacc
      -DWITH_TKET=ON
      -DTKET_DIR=${QB_DIR}/tket
      -DENABLE_MPI=$USE_MPI
    - cmake --build build -- -j`nproc`
    - cmake --install build
    - mkdir core_artefacts
    - mv build cmake examples include src tests remote_backends.yaml core_artefacts
  artifacts:
    when: always
    paths: !reference [.paths, rhel]

# tests
rhel-x86-cpp-tests:
  stage: test
  needs: ["rhel-x86-build"]
  extends: .install-core
  image: $CI_IMAGE_RHEL_X86
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - ./build/CITests --test --gtest_output='xml:core_gtests.xml'
    - ./build/TketTests --test --gtest_output='xml:tket_gtests.xml'
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: core_gtests.xml
      junit: tket_gtests.xml

rhel-x86-cudaq-tests:
  stage: test
  needs: ["rhel-x86-build"]
  extends: .install-core
  image: $CI_IMAGE_RHEL_X86
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - ./build/CudaqCITests --test --gtest_output='xml:core_cudaq_gtests.xml'
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: core_cudaq_gtests.xml

rhel-x86-py-tests:
  stage: test
  needs: ["rhel-x86-build"]
  extends: .install-core
  image: $CI_IMAGE_RHEL_X86
  tags:
    - cutensornet2.0
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
  script:
    - cd tests/python_module && python3 -m pytest --junitxml="report.xml"
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: tests/python_module/report.xml

# trigger: If this branch is part of a merge request, trigger downstream emulator build and test.
rhel-x86-trigger-emulator:
  stage: downstream
  needs: ["rhel-x86-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/emulator
    branch: $EMULATOR_TRIGGER_BRANCH
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH
    UPSTREAM_JOB: rhel-x86-trigger-emulator


# - - - - - - - powerpc - - - - - - - #

# build
ppc_instance_start:
  extends: .ppc_instance_start
  stage: build
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"
      when: manual
      allow_failure: false

rhel-power-build:
  stage: build
  needs: [ppc_instance_start]
  image: $CI_IMAGE_RHEL_PPC
  tags:
    - powerDocker
  script:
    - rm -rf ${QB_DIR}/core
    - cmake -B build .
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core
      -DXACC_DIR=${QB_DIR}/xacc
      -DTNQVM_DIR=${QB_DIR}/xacc
      -DWITH_TKET=ON
      -DTKET_DIR=${QB_DIR}/tket
      -DENABLE_MPI=$USE_MPI
      -DBUILD_TESTS_WITHOUT_GPU=ON
    - cmake --build build -- -j`nproc`
    - cmake --install build
    - mkdir core_artefacts
    - mv build cmake examples include src tests remote_backends.yaml core_artefacts
  artifacts:
    when: always
    paths: !reference [.paths, rhel]
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"

# tests
rhel-power-cpp-tests:
  stage: test
  needs: ["rhel-power-build"]
  extends: .install-core
  image: $CI_IMAGE_RHEL_PPC
  tags:
    - powerDocker
  script:
    - ./build/CITests --test --gtest_output='xml:core_gtests.xml'
    - ./build/TketTests --test --gtest_output='xml:tket_gtests.xml'
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: core_gtests.xml
      junit: tket_gtests.xml
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"

rhel-power-cudaq-tests:
  stage: test
  needs: ["rhel-power-build"]
  extends: .install-core
  image: $CI_IMAGE_RHEL_PPC
  tags:
    - powerDocker
  script:
    - ./build/CudaqCITests --test --gtest_output='xml:core_cudaq_gtests.xml'
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: core_cudaq_gtests.xml
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"

rhel-power-py-tests:
  stage: test
  needs: ["rhel-power-build"]
  extends: .install-core
  image: $CI_IMAGE_RHEL_PPC
  tags:
    - powerDocker
  script:
    - cd tests/python_module && python3 -m pytest --junitxml="report.xml"
    - rm -rf ${QB_DIR}/core
  artifacts:
    when: always
    reports:
      junit: tests/python_module/report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"

ppc_instance_stop:
  extends: .ppc_instance_stop
  stage: test
  when: always
  needs: [rhel-power-build, rhel-power-cpp-tests, rhel-power-cudaq-tests, rhel-power-py-tests]
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "schedule"

# trigger
# If this branch is part of a merge request, trigger downstream emulator build and test.
rhel-power-trigger-emulator:
  stage: downstream
  needs: ["rhel-power-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/emulator
    branch: $EMULATOR_TRIGGER_BRANCH
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH
    UPSTREAM_JOB: rhel-power-trigger-emulator
# - - - - - - - - - - - - - - - - - - RHEL (end)- - - - - - - - - - - - - - - - - - #
