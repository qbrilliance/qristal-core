variables:
  CI_IMAGE: registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/ubuntu-22.04:sdk-1
  EMULATOR_CI_IMAGE_GCC: registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/ubuntu-22.04:emulator-gcc-1
  EMULATOR_CI_IMAGE_CLANG: registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/ubuntu-22.04:emulator-clang-1

stages:
  - build
  - test
  - downstream

# Switch between merge request and branch pipelines.
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.install-core:
  before_script:
    - echo $PWD
    - ls *
    - whoami
    - rm -rf ${QB_DIR}/core-local
    - mv core_artefacts/build .
    - cmake --install build

ci-build-for-emulator:
  stage: build
  image: $EMULATOR_CI_IMAGE_GCC
  tags: 
    - cutensornet2.0
  script:
    - rm -rf ${QB_DIR}/core-local
    # Build core with SUPPORT_EMULATOR_BUILD_ONLY=ON
    - cmake -B build . 
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core-local 
      -DXACC_DIR=${QB_DIR}/xacc-local
      -Dautodiff_DIR=${QB_DIR}/autodiff-local/lib/cmake/autodiff
      -DSUPPORT_EMULATOR_BUILD_ONLY=ON
    - cmake --build build -- -j`nproc`
    # We need to put these things in a dedicated folder to avoid clashing with files of the same name in downstream projects.
    - mkdir core_artefacts
    - mv build cmake include core_artefacts/
  artifacts:
    when: always
    paths: 
      # These are all the things required to install the core for supporting the build of the emulator.
      - core_artefacts/build/cmake_install.cmake
      - core_artefacts/build/coreDependencies.cmake
      - core_artefacts/build/qbcore-config.cmake
      - core_artefacts/build/qbcore-config-version.cmake
      - core_artefacts/build/CMakeFiles/Export/
      - core_artefacts/build/libnoise.so*
      - core_artefacts/cmake/py_packages_path.cmake
      - core_artefacts/cmake/xacc_utilities.cmake
      - core_artefacts/cmake/cudaq_utilities.cmake
      - core_artefacts/cmake/manifest.json.in
      - core_artefacts/include
      
ci-build:
  stage: build
  image: $CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - rm -rf ${QB_DIR}/core-local
    - cmake -B build . 
      -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core-local 
      -DXACC_DIR=${QB_DIR}/xacc-local
      -DTNQVM_DIR=${QB_DIR}/xacc-local
      -DWITH_TKET=ON
      -DTKET_DIR=${QB_DIR}/tket-local
    - cmake --build build -- -j`nproc`
    # We need to put these things in a dedicated folder to avoid clashing with files of the same name in downstream projects.
    - mkdir core_artefacts
    - mv build cmake examples include src tests core_artefacts/
  artifacts:
    when: always
    paths:
      # These are all the things required to install the full core.
      - core_artefacts/build/cmake_install.cmake
      - core_artefacts/build/coreDependencies.cmake
      - core_artefacts/build/qbcore-config.cmake
      - core_artefacts/build/qbcore-config-version.cmake
      - core_artefacts/build/CMakeFiles/Export/
      - core_artefacts/build/CITests
      - core_artefacts/build/lib*
      - core_artefacts/build/core.cpython-*-linux-gnu.so
      - core_artefacts/build/plugins
      - core_artefacts/build/configured_example_files
      - core_artefacts/cmake/py_packages_path.cmake
      - core_artefacts/cmake/xacc_utilities.cmake
      - core_artefacts/cmake/cudaq_utilities.cmake
      - core_artefacts/cmake/manifest.json.in
      - core_artefacts/include
      - core_artefacts/examples
      - core_artefacts/src/aws_braket/aws_python_script.py
      - core_artefacts/tests/XaccInitialisedTests.cpp

# Build with CUDA (GPU) and CUDA Quantum support (using emulator image and runner)
cudaq-build:
  stage: build
  image: ${CUDAQ_CI_IMAGE}
  parallel:
    matrix:
      - CUDAQ_CI_IMAGE: ["$EMULATOR_CI_IMAGE_GCC", "$EMULATOR_CI_IMAGE_CLANG"]
  tags: 
    - cutensornet2.0
  script:
    - rm -rf ${QB_DIR}/core-local
    - cmake -B build . -DCMAKE_INSTALL_PREFIX=${QB_DIR}/core-local
    - cmake --build build -- -j`nproc`
    - cmake --install build
    - mkdir core_artefacts
    - mv build cmake examples include src tests core_artefacts
  artifacts:
    when: always
    paths:
      # These are all the things required to install the full core.
      - core_artefacts/build/cmake_install.cmake
      - core_artefacts/build/coreDependencies.cmake
      - core_artefacts/build/qbcore-config.cmake
      - core_artefacts/build/qbcore-config-version.cmake
      - core_artefacts/build/CMakeFiles/Export/
      - core_artefacts/build/CudaqCITests
      - core_artefacts/build/lib*
      - core_artefacts/build/core.cpython-*-linux-gnu.so
      - core_artefacts/build/plugins
      - core_artefacts/build/configured_example_files
      - core_artefacts/cmake/py_packages_path.cmake
      - core_artefacts/cmake/xacc_utilities.cmake
      - core_artefacts/cmake/cudaq_utilities.cmake
      - core_artefacts/cmake/manifest.json.in
      - core_artefacts/include
      - core_artefacts/examples
      - core_artefacts/src/aws_braket/aws_python_script.py
      - core_artefacts/tests/XaccInitialisedTests.cpp

ci-cpp-tests:
  stage: test
  needs: ["ci-build"]
  extends: .install-core
  image: $CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - ./build/CITests --test --gtest_output='xml:core_gtests.xml'
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: core_gtests.xml

ci-py-tests:
  stage: test
  needs: ["ci-build"]
  extends: .install-core
  image: $CI_IMAGE
  tags: 
    - docker-heavy
  script:
    - cd tests/python_module && python3 -m pytest --junitxml="report.xml"
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: tests/python_module/report.xml

ci-py-stack-tests:
  stage: test
  needs: ["ci-build"]
  extends: .install-core
  image: $CI_IMAGE
  tags: 
    - Qristal CI Runner
  script:
    - echo "# QB_QCSTACK_2023_2_1_URL = $QB_QCSTACK_2023_2_1_URL"
    - cd tests/qcstack && python3 -m pytest --junitxml="report-stack.xml"
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: tests/qcstack/report-stack.xml

cudaq-cpp-tests-gcc:
  stage: test
  needs: ["cudaq-build: [$EMULATOR_CI_IMAGE_GCC]"]
  image: $EMULATOR_CI_IMAGE_GCC
  extends: .install-core
  tags: 
    - cutensornet2.0
  script:
    - ./build/CudaqCITests --test --gtest_output='xml:core_cudaq_gtests.xml'
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: core_cudaq_gtests.xml

cudaq-cpp-tests-clang:
  stage: test
  needs: ["cudaq-build: [$EMULATOR_CI_IMAGE_CLANG]"]
  image: $EMULATOR_CI_IMAGE_CLANG
  extends: .install-core
  tags: 
    - cutensornet2.0
  script:
    - ./build/CudaqCITests --test --gtest_output='xml:core_cudaq_gtests.xml'
    - rm -rf ${QB_DIR}/core-local
  artifacts:
    when: always
    reports:
      junit: core_cudaq_gtests.xml

# If this branch is part of a merge request, trigger downstream decoder build and test.
trigger-decoder:
  stage: downstream
  needs: ["ci-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/decoder  
    branch: main
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH

# If this branch is part of a merge request, trigger downstream emulator build and test.
trigger-emulator:
  stage: downstream
  needs: ["ci-build-for-emulator"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/emulator
    branch: main
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH

# If this branch is part of a merge request, trigger downstream SDK build and test.
trigger-sdk:
  stage: downstream
  needs: ["ci-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  trigger:
    project: qbau/software-and-apps/QBSDK
    branch: main
  variables:
    UPSTREAM_REF: $CI_MERGE_REQUEST_REF_PATH
